// Code generated by command: go run asm.go -out md5.s -stubs stub.go. DO NOT EDIT.

// func block(h *[4]uint32, m []byte)
TEXT Â·block(SB), $64-32
	MOVQ h+0(FP), AX
	MOVQ m_base+8(FP), CX

	// Load initial hash.
	MOVL (AX), DX
	MOVL 4(AX), BX
	MOVL 8(AX), BP
	MOVL 12(AX), SI

	// Initialize registers.
	MOVL DX, DI
	MOVL BX, R8
	MOVL BP, R9
	MOVL SI, R10

	// Round 1. Operation 1.
	MOVL (CX), R11
	MOVL DI, DI
	MOVL R10, R12
	XORL R9, R12
	ANDL R8, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0xd76aa478, DI
	ADDL R11, DI
	ROLL $0x07, DI
	ADDL R8, DI

	// Round 1. Operation 2.
	MOVL 4(CX), R11
	MOVL R10, R10
	MOVL R9, R12
	XORL R8, R12
	ANDL DI, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0xe8c7b756, R10
	ADDL R11, R10
	ROLL $0x0c, R10
	ADDL DI, R10

	// Round 1. Operation 3.
	MOVL 8(CX), R11
	MOVL R9, R9
	MOVL R8, R12
	XORL DI, R12
	ANDL R10, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0x242070db, R9
	ADDL R11, R9
	ROLL $0x11, R9
	ADDL R10, R9

	// Round 1. Operation 4.
	MOVL 12(CX), R11
	MOVL R8, R8
	MOVL DI, R12
	XORL R10, R12
	ANDL R9, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0xc1bdceee, R8
	ADDL R11, R8
	ROLL $0x16, R8
	ADDL R9, R8

	// Round 1. Operation 5.
	MOVL 16(CX), R11
	MOVL DI, DI
	MOVL R10, R12
	XORL R9, R12
	ANDL R8, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0xf57c0faf, DI
	ADDL R11, DI
	ROLL $0x07, DI
	ADDL R8, DI

	// Round 1. Operation 6.
	MOVL 20(CX), R11
	MOVL R10, R10
	MOVL R9, R12
	XORL R8, R12
	ANDL DI, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0x4787c62a, R10
	ADDL R11, R10
	ROLL $0x0c, R10
	ADDL DI, R10

	// Round 1. Operation 7.
	MOVL 24(CX), R11
	MOVL R9, R9
	MOVL R8, R12
	XORL DI, R12
	ANDL R10, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0xa8304613, R9
	ADDL R11, R9
	ROLL $0x11, R9
	ADDL R10, R9

	// Round 1. Operation 8.
	MOVL 28(CX), R11
	MOVL R8, R8
	MOVL DI, R12
	XORL R10, R12
	ANDL R9, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0xfd469501, R8
	ADDL R11, R8
	ROLL $0x16, R8
	ADDL R9, R8

	// Round 1. Operation 9.
	MOVL 32(CX), R11
	MOVL DI, DI
	MOVL R10, R12
	XORL R9, R12
	ANDL R8, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0x698098d8, DI
	ADDL R11, DI
	ROLL $0x07, DI
	ADDL R8, DI

	// Round 1. Operation 10.
	MOVL 36(CX), R11
	MOVL R10, R10
	MOVL R9, R12
	XORL R8, R12
	ANDL DI, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0x8b44f7af, R10
	ADDL R11, R10
	ROLL $0x0c, R10
	ADDL DI, R10

	// Round 1. Operation 11.
	MOVL 40(CX), R11
	MOVL R9, R9
	MOVL R8, R12
	XORL DI, R12
	ANDL R10, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0xffff5bb1, R9
	ADDL R11, R9
	ROLL $0x11, R9
	ADDL R10, R9

	// Round 1. Operation 12.
	MOVL 44(CX), R11
	MOVL R8, R8
	MOVL DI, R12
	XORL R10, R12
	ANDL R9, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0x895cd7be, R8
	ADDL R11, R8
	ROLL $0x16, R8
	ADDL R9, R8

	// Round 1. Operation 13.
	MOVL 48(CX), R11
	MOVL DI, DI
	MOVL R10, R12
	XORL R9, R12
	ANDL R8, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0x6b901122, DI
	ADDL R11, DI
	ROLL $0x07, DI
	ADDL R8, DI

	// Round 1. Operation 14.
	MOVL 52(CX), R11
	MOVL R10, R10
	MOVL R9, R12
	XORL R8, R12
	ANDL DI, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0xfd987193, R10
	ADDL R11, R10
	ROLL $0x0c, R10
	ADDL DI, R10

	// Round 1. Operation 15.
	MOVL 56(CX), R11
	MOVL R9, R9
	MOVL R8, R12
	XORL DI, R12
	ANDL R10, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0xa679438e, R9
	ADDL R11, R9
	ROLL $0x11, R9
	ADDL R10, R9

	// Round 1. Operation 16.
	MOVL 60(CX), CX
	MOVL R8, R8
	MOVL DI, R11
	XORL R10, R11
	ANDL R9, R11
	XORL DI, R11
	ADDL R11, R8
	ADDL $0x49b40821, R8
	ADDL CX, R8
	ROLL $0x16, R8
	ADDL R9, R8

	// Round 2. Operation 17.
	MOVL 4(SP), CX
	MOVL R10, R11
	NOTL R11
	MOVL DI, DI
	MOVL R8, R12
	ANDL R10, R12
	MOVL R11, R11
	ANDL R9, R11
	ORL  R11, R12
	ADDL R12, DI
	ADDL $0xf61e2562, DI
	ADDL CX, DI
	ROLL $0x05, DI
	ADDL R8, DI

	// Round 2. Operation 18.
	MOVL 24(SP), CX
	MOVL R9, R11
	NOTL R11
	MOVL R10, R10
	MOVL DI, R12
	ANDL R9, R12
	MOVL R11, R11
	ANDL R8, R11
	ORL  R11, R12
	ADDL R12, R10
	ADDL $0xc040b340, R10
	ADDL CX, R10
	ROLL $0x09, R10
	ADDL DI, R10

	// Round 2. Operation 19.
	MOVL 44(SP), CX
	MOVL R8, R11
	NOTL R11
	MOVL R9, R9
	MOVL R10, R12
	ANDL R8, R12
	MOVL R11, R11
	ANDL DI, R11
	ORL  R11, R12
	ADDL R12, R9
	ADDL $0x265e5a51, R9
	ADDL CX, R9
	ROLL $0x0e, R9
	ADDL R10, R9

	// Round 2. Operation 20.
	MOVL (SP), CX
	MOVL DI, R11
	NOTL R11
	MOVL R8, R8
	MOVL R9, R12
	ANDL DI, R12
	MOVL R11, R11
	ANDL R10, R11
	ORL  R11, R12
	ADDL R12, R8
	ADDL $0xe9b6c7aa, R8
	ADDL CX, R8
	ROLL $0x14, R8
	ADDL R9, R8

	// Round 2. Operation 21.
	MOVL 20(SP), CX
	MOVL R10, R11
	NOTL R11
	MOVL DI, DI
	MOVL R8, R12
	ANDL R10, R12
	MOVL R11, R11
	ANDL R9, R11
	ORL  R11, R12
	ADDL R12, DI
	ADDL $0xd62f105d, DI
	ADDL CX, DI
	ROLL $0x05, DI
	ADDL R8, DI

	// Round 2. Operation 22.
	MOVL 40(SP), CX
	MOVL R9, R11
	NOTL R11
	MOVL R10, R10
	MOVL DI, R12
	ANDL R9, R12
	MOVL R11, R11
	ANDL R8, R11
	ORL  R11, R12
	ADDL R12, R10
	ADDL $0x02441453, R10
	ADDL CX, R10
	ROLL $0x09, R10
	ADDL DI, R10

	// Round 2. Operation 23.
	MOVL 60(SP), CX
	MOVL R8, R11
	NOTL R11
	MOVL R9, R9
	MOVL R10, R12
	ANDL R8, R12
	MOVL R11, R11
	ANDL DI, R11
	ORL  R11, R12
	ADDL R12, R9
	ADDL $0xd8a1e681, R9
	ADDL CX, R9
	ROLL $0x0e, R9
	ADDL R10, R9

	// Round 2. Operation 24.
	MOVL 16(SP), CX
	MOVL DI, R11
	NOTL R11
	MOVL R8, R8
	MOVL R9, R12
	ANDL DI, R12
	MOVL R11, R11
	ANDL R10, R11
	ORL  R11, R12
	ADDL R12, R8
	ADDL $0xe7d3fbc8, R8
	ADDL CX, R8
	ROLL $0x14, R8
	ADDL R9, R8

	// Round 2. Operation 25.
	MOVL 36(SP), CX
	MOVL R10, R11
	NOTL R11
	MOVL DI, DI
	MOVL R8, R12
	ANDL R10, R12
	MOVL R11, R11
	ANDL R9, R11
	ORL  R11, R12
	ADDL R12, DI
	ADDL $0x21e1cde6, DI
	ADDL CX, DI
	ROLL $0x05, DI
	ADDL R8, DI

	// Round 2. Operation 26.
	MOVL 56(SP), CX
	MOVL R9, R11
	NOTL R11
	MOVL R10, R10
	MOVL DI, R12
	ANDL R9, R12
	MOVL R11, R11
	ANDL R8, R11
	ORL  R11, R12
	ADDL R12, R10
	ADDL $0xc33707d6, R10
	ADDL CX, R10
	ROLL $0x09, R10
	ADDL DI, R10

	// Round 2. Operation 27.
	MOVL 12(SP), CX
	MOVL R8, R11
	NOTL R11
	MOVL R9, R9
	MOVL R10, R12
	ANDL R8, R12
	MOVL R11, R11
	ANDL DI, R11
	ORL  R11, R12
	ADDL R12, R9
	ADDL $0xf4d50d87, R9
	ADDL CX, R9
	ROLL $0x0e, R9
	ADDL R10, R9

	// Round 2. Operation 28.
	MOVL 32(SP), CX
	MOVL DI, R11
	NOTL R11
	MOVL R8, R8
	MOVL R9, R12
	ANDL DI, R12
	MOVL R11, R11
	ANDL R10, R11
	ORL  R11, R12
	ADDL R12, R8
	ADDL $0x455a14ed, R8
	ADDL CX, R8
	ROLL $0x14, R8
	ADDL R9, R8

	// Round 2. Operation 29.
	MOVL 52(SP), CX
	MOVL R10, R11
	NOTL R11
	MOVL DI, DI
	MOVL R8, R12
	ANDL R10, R12
	MOVL R11, R11
	ANDL R9, R11
	ORL  R11, R12
	ADDL R12, DI
	ADDL $0xa9e3e905, DI
	ADDL CX, DI
	ROLL $0x05, DI
	ADDL R8, DI

	// Round 2. Operation 30.
	MOVL 8(SP), CX
	MOVL R9, R11
	NOTL R11
	MOVL R10, R10
	MOVL DI, R12
	ANDL R9, R12
	MOVL R11, R11
	ANDL R8, R11
	ORL  R11, R12
	ADDL R12, R10
	ADDL $0xfcefa3f8, R10
	ADDL CX, R10
	ROLL $0x09, R10
	ADDL DI, R10

	// Round 2. Operation 31.
	MOVL 28(SP), CX
	MOVL R8, R11
	NOTL R11
	MOVL R9, R9
	MOVL R10, R12
	ANDL R8, R12
	MOVL R11, R11
	ANDL DI, R11
	ORL  R11, R12
	ADDL R12, R9
	ADDL $0x676f02d9, R9
	ADDL CX, R9
	ROLL $0x0e, R9
	ADDL R10, R9

	// Round 2. Operation 32.
	MOVL 48(SP), CX
	MOVL DI, R11
	NOTL R11
	MOVL R8, R8
	MOVL R9, R12
	ANDL DI, R12
	MOVL R11, R13
	ANDL R10, R13
	ORL  R13, R12
	ADDL R12, R8
	ADDL $0x8d2a4c8a, R8
	ADDL CX, R8
	ROLL $0x14, R8
	ADDL R9, R8

	// Round 3. Operation 33.
	MOVL 20(SP), CX
	MOVL DI, DI
	MOVL R8, R12
	XORL R9, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0xfffa3942, DI
	ADDL CX, DI
	ROLL $0x04, DI
	ADDL R8, DI

	// Round 3. Operation 34.
	MOVL 32(SP), CX
	MOVL R10, R10
	MOVL DI, R12
	XORL R8, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0x8771f681, R10
	ADDL CX, R10
	ROLL $0x0b, R10
	ADDL DI, R10

	// Round 3. Operation 35.
	MOVL 44(SP), CX
	MOVL R9, R9
	MOVL R10, R12
	XORL DI, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0x6d9d6122, R9
	ADDL CX, R9
	ROLL $0x10, R9
	ADDL R10, R9

	// Round 3. Operation 36.
	MOVL 56(SP), CX
	MOVL R8, R8
	MOVL R9, R12
	XORL R10, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0xfde5380c, R8
	ADDL CX, R8
	ROLL $0x17, R8
	ADDL R9, R8

	// Round 3. Operation 37.
	MOVL 4(SP), CX
	MOVL DI, DI
	MOVL R8, R12
	XORL R9, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0xa4beea44, DI
	ADDL CX, DI
	ROLL $0x04, DI
	ADDL R8, DI

	// Round 3. Operation 38.
	MOVL 16(SP), CX
	MOVL R10, R10
	MOVL DI, R12
	XORL R8, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0x4bdecfa9, R10
	ADDL CX, R10
	ROLL $0x0b, R10
	ADDL DI, R10

	// Round 3. Operation 39.
	MOVL 28(SP), CX
	MOVL R9, R9
	MOVL R10, R12
	XORL DI, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0xf6bb4b60, R9
	ADDL CX, R9
	ROLL $0x10, R9
	ADDL R10, R9

	// Round 3. Operation 40.
	MOVL 40(SP), CX
	MOVL R8, R8
	MOVL R9, R12
	XORL R10, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0xbebfbc70, R8
	ADDL CX, R8
	ROLL $0x17, R8
	ADDL R9, R8

	// Round 3. Operation 41.
	MOVL 52(SP), CX
	MOVL DI, DI
	MOVL R8, R12
	XORL R9, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0x289b7ec6, DI
	ADDL CX, DI
	ROLL $0x04, DI
	ADDL R8, DI

	// Round 3. Operation 42.
	MOVL (SP), CX
	MOVL R10, R10
	MOVL DI, R12
	XORL R8, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0xeaa127fa, R10
	ADDL CX, R10
	ROLL $0x0b, R10
	ADDL DI, R10

	// Round 3. Operation 43.
	MOVL 12(SP), CX
	MOVL R9, R9
	MOVL R10, R12
	XORL DI, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0xd4ef3085, R9
	ADDL CX, R9
	ROLL $0x10, R9
	ADDL R10, R9

	// Round 3. Operation 44.
	MOVL 24(SP), CX
	MOVL R8, R8
	MOVL R9, R12
	XORL R10, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0x04881d05, R8
	ADDL CX, R8
	ROLL $0x17, R8
	ADDL R9, R8

	// Round 3. Operation 45.
	MOVL 36(SP), CX
	MOVL DI, DI
	MOVL R8, R12
	XORL R9, R12
	XORL R10, R12
	ADDL R12, DI
	ADDL $0xd9d4d039, DI
	ADDL CX, DI
	ROLL $0x04, DI
	ADDL R8, DI

	// Round 3. Operation 46.
	MOVL 48(SP), CX
	MOVL R10, R10
	MOVL DI, R12
	XORL R8, R12
	XORL R9, R12
	ADDL R12, R10
	ADDL $0xe6db99e5, R10
	ADDL CX, R10
	ROLL $0x0b, R10
	ADDL DI, R10

	// Round 3. Operation 47.
	MOVL 60(SP), CX
	MOVL R9, R9
	MOVL R10, R12
	XORL DI, R12
	XORL R8, R12
	ADDL R12, R9
	ADDL $0x1fa27cf8, R9
	ADDL CX, R9
	ROLL $0x10, R9
	ADDL R10, R9

	// Round 3. Operation 48.
	MOVL 8(SP), CX
	MOVL R8, R8
	MOVL R9, R12
	XORL R10, R12
	XORL DI, R12
	ADDL R12, R8
	ADDL $0xc4ac5665, R8
	ADDL CX, R8
	ROLL $0x17, R8
	ADDL R9, R8

	// Round 4. Operation 49.
	MOVL (SP), CX
	MOVL DI, DI
	MOVL R11, R12
	ORL  R8, R12
	XORL R9, R12
	ADDL R12, DI
	ADDL $0xf4292244, DI
	ADDL CX, DI
	ROLL $0x06, DI
	ADDL R8, DI

	// Round 4. Operation 50.
	MOVL 28(SP), CX
	MOVL R10, R10
	MOVL R11, R12
	ORL  DI, R12
	XORL R8, R12
	ADDL R12, R10
	ADDL $0x432aff97, R10
	ADDL CX, R10
	ROLL $0x0a, R10
	ADDL DI, R10

	// Round 4. Operation 51.
	MOVL 56(SP), CX
	MOVL R9, R9
	MOVL R11, R12
	ORL  R10, R12
	XORL DI, R12
	ADDL R12, R9
	ADDL $0xab9423a7, R9
	ADDL CX, R9
	ROLL $0x0f, R9
	ADDL R10, R9

	// Round 4. Operation 52.
	MOVL 20(SP), CX
	MOVL R8, R8
	MOVL R11, R12
	ORL  R9, R12
	XORL R10, R12
	ADDL R12, R8
	ADDL $0xfc93a039, R8
	ADDL CX, R8
	ROLL $0x15, R8
	ADDL R9, R8

	// Round 4. Operation 53.
	MOVL 48(SP), CX
	MOVL DI, DI
	MOVL R11, R12
	ORL  R8, R12
	XORL R9, R12
	ADDL R12, DI
	ADDL $0x655b59c3, DI
	ADDL CX, DI
	ROLL $0x06, DI
	ADDL R8, DI

	// Round 4. Operation 54.
	MOVL 12(SP), CX
	MOVL R10, R10
	MOVL R11, R12
	ORL  DI, R12
	XORL R8, R12
	ADDL R12, R10
	ADDL $0x8f0ccc92, R10
	ADDL CX, R10
	ROLL $0x0a, R10
	ADDL DI, R10

	// Round 4. Operation 55.
	MOVL 40(SP), CX
	MOVL R9, R9
	MOVL R11, R12
	ORL  R10, R12
	XORL DI, R12
	ADDL R12, R9
	ADDL $0xffeff47d, R9
	ADDL CX, R9
	ROLL $0x0f, R9
	ADDL R10, R9

	// Round 4. Operation 56.
	MOVL 4(SP), CX
	MOVL R8, R8
	MOVL R11, R12
	ORL  R9, R12
	XORL R10, R12
	ADDL R12, R8
	ADDL $0x85845dd1, R8
	ADDL CX, R8
	ROLL $0x15, R8
	ADDL R9, R8

	// Round 4. Operation 57.
	MOVL 32(SP), CX
	MOVL DI, DI
	MOVL R11, R12
	ORL  R8, R12
	XORL R9, R12
	ADDL R12, DI
	ADDL $0x6fa87e4f, DI
	ADDL CX, DI
	ROLL $0x06, DI
	ADDL R8, DI

	// Round 4. Operation 58.
	MOVL 60(SP), CX
	MOVL R10, R10
	MOVL R11, R12
	ORL  DI, R12
	XORL R8, R12
	ADDL R12, R10
	ADDL $0xfe2ce6e0, R10
	ADDL CX, R10
	ROLL $0x0a, R10
	ADDL DI, R10

	// Round 4. Operation 59.
	MOVL 24(SP), CX
	MOVL R9, R9
	MOVL R11, R12
	ORL  R10, R12
	XORL DI, R12
	ADDL R12, R9
	ADDL $0xa3014314, R9
	ADDL CX, R9
	ROLL $0x0f, R9
	ADDL R10, R9

	// Round 4. Operation 60.
	MOVL 52(SP), CX
	MOVL R8, R8
	MOVL R11, R12
	ORL  R9, R12
	XORL R10, R12
	ADDL R12, R8
	ADDL $0x4e0811a1, R8
	ADDL CX, R8
	ROLL $0x15, R8
	ADDL R9, R8

	// Round 4. Operation 61.
	MOVL 16(SP), CX
	MOVL DI, DI
	MOVL R11, R12
	ORL  R8, R12
	XORL R9, R12
	ADDL R12, DI
	ADDL $0xf7537e82, DI
	ADDL CX, DI
	ROLL $0x06, DI
	ADDL R8, DI

	// Round 4. Operation 62.
	MOVL 44(SP), CX
	MOVL R10, R10
	MOVL R11, R12
	ORL  DI, R12
	XORL R8, R12
	ADDL R12, R10
	ADDL $0xbd3af235, R10
	ADDL CX, R10
	ROLL $0x0a, R10
	ADDL DI, R10

	// Round 4. Operation 63.
	MOVL 8(SP), CX
	MOVL R9, R9
	MOVL R11, R12
	ORL  R10, R12
	XORL DI, R12
	ADDL R12, R9
	ADDL $0x2ad7d2bb, R9
	ADDL CX, R9
	ROLL $0x0f, R9
	ADDL R10, R9

	// Round 4. Operation 64.
	MOVL 36(SP), CX
	MOVL R8, R8
	MOVL R11, R11
	ORL  R9, R11
	XORL R10, R11
	ADDL R11, R8
	ADDL $0xeb86d391, R8
	ADDL CX, R8
	ROLL $0x15, R8
	ADDL R9, R8

	// Final add.
	ADDL DI, DX
	ADDL R8, BX
	ADDL R9, BP
	ADDL R10, SI

	// Store results back.
	MOVL DX, (AX)
	MOVL BX, 4(AX)
	MOVL BP, 8(AX)
	MOVL SI, 12(AX)
	RET
